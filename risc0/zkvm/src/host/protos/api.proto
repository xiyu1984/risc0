syntax = "proto3";

import "google/protobuf/empty.proto";
import "base.proto";

package api;

message ServerRequest {
  oneof kind {
    ExecuteRequest execute = 1;
    ProveRequest prove = 2;
    ProveSegmentRequest prove_segment = 3;
    LiftRequest lift = 4;
    JoinRequest join = 5;
    IdentityP254Request identity_p254 = 6;
    ResolveRequest resolve = 7;
    CompressRequest compress = 8;
    ProveZkrRequest prove_zkr = 9;
  }
}

message HelloRequest {
  base.SemanticVersion version = 1;
}

message HelloReply {
  oneof kind {
    HelloResult ok = 1;
    GenericError error = 2;
  }
}

message HelloResult {
  base.SemanticVersion version = 1;
}

message ExecuteRequest {
  ExecutorEnv env = 1;
  AssetRequest segments_out = 2;
}

message ProveRequest {
  ExecutorEnv env = 1;
  ProverOpts opts = 2;
  AssetRequest receipt_out = 3;
}

message ProveSegmentRequest {
  ProverOpts opts = 1;
  Asset segment = 2;
  AssetRequest receipt_out = 3;
}

message ProveSegmentReply {
  oneof kind {
    ProveSegmentResult ok = 1;
    GenericError error = 2;
  }
}

message ProveZkrRequest {
  base.Digest claim_digest = 1;
  base.Digest control_id = 2;
  bytes input = 3;
  // This is optional in the context of a CoprocessorRequest
  AssetRequest receipt_out = 4;
}

message ProveZkrReply {
  oneof kind {
    ProveZkrResult ok = 1;
    GenericError error = 2;
  }
}

message ProveZkrResult {
  Asset receipt = 1;
}

message LiftRequest {
  ProverOpts opts = 1;
  Asset receipt = 2;
  AssetRequest receipt_out = 3;
}

message LiftReply {
  oneof kind {
    LiftResult ok = 1;
    GenericError error = 2;
  }
}

message LiftResult {
  Asset receipt = 1;
}

message JoinRequest {
  ProverOpts opts = 1;
  Asset left_receipt = 2;
  Asset right_receipt = 3;
  AssetRequest receipt_out = 4;
}

message JoinReply {
  oneof kind {
    JoinResult ok = 1;
    GenericError error = 2;
  }
}

message JoinResult {
  Asset receipt = 1;
}

message ResolveRequest {
  ProverOpts opts = 1;
  Asset conditional_receipt = 2;
  Asset assumption_receipt = 3;
  AssetRequest receipt_out = 4;
}

message ResolveReply {
  oneof kind {
    ResolveResult ok = 1;
    GenericError error = 2;
  }
}

message ResolveResult {
  Asset receipt = 1;
}

message IdentityP254Request {
  ProverOpts opts = 1;
  Asset receipt = 2;
  AssetRequest receipt_out = 3;
}

message IdentityP254Reply {
  oneof kind {
    IdentityP254Result ok = 1;
    GenericError error = 2;
  }
}

message IdentityP254Result {
  Asset receipt = 1;
}

message CompressRequest {
  ProverOpts opts = 1;
  Asset receipt = 2;
  AssetRequest receipt_out = 3;
}

message CompressReply {
  oneof kind {
    CompressResult ok = 1;
    GenericError error = 2;
  }
}

message CompressResult {
  Asset receipt = 1;
}

message ExecutorEnv {
  Asset binary = 1;
  map<string, string> env_vars = 2;
  repeated string slice_ios = 3;
  repeated uint32 read_fds = 4;
  repeated uint32 write_fds = 5;
  optional uint32 segment_limit_po2 = 6;
  optional uint64 session_limit = 7;
  repeated string args = 8;
  // When present, trace events will be sent back to the client.
  google.protobuf.Empty trace_events = 9;
  string pprof_out = 10;
  repeated AssumptionReceipt assumptions = 11;
  string segment_path = 12;
  bool coprocessor = 13;
}

message AssumptionReceipt {
  oneof kind {
    Asset proven = 1;     // InnerReceipt
    Asset unresolved = 2; // Assumption
  }
}

message ProverOpts {
  string hashfn = 1;
  bool prove_guest_errors = 2;
  ReceiptKind receipt_kind = 3;
  repeated base.Digest control_ids = 4;
  uint64 max_segment_po2 = 5;
}

enum ReceiptKind {
  COMPOSITE = 0;
  SUCCINCT = 1;
  GROTH16 = 2;
}

message SessionInfo {
  uint32 segments = 1;
  bytes journal = 2;
  base.ExitCode exit_code = 3;
}

message SegmentInfo {
  uint32 index = 1;
  uint32 po2 = 2;
  uint32 cycles = 3;
  Asset segment = 4;
}

message ProveSegmentResult {
  Asset receipt = 1;
}

message Asset {
  oneof kind {
    bytes inline = 1;
    string path = 2;
  }
}

message AssetRequest {
  oneof kind {
    google.protobuf.Empty inline = 1;
    string path = 2;
  }
}

message ServerReply {
  oneof kind {
    ClientCallback ok = 1;
    GenericError error = 2;
  }
}

message ClientCallback {
  oneof kind {
    OnIoRequest io = 1;
    OnSegmentDone segment_done = 2;
    OnSessionDone session_done = 3;
    OnProveDone prove_done = 4;
  }
}

message OnIoRequest {
  oneof kind {
    PosixIo posix = 1;
    SliceIo slice = 2;
    TraceEvent trace = 3;
    CoprocessorRequest coprocessor = 4;
  }
}

message SliceIo {
  string name = 1;
  bytes from_guest = 2;
}

message PosixIo {
  uint32 fd = 1;
  PosixCmd cmd = 2;
}

message PosixCmd {
  oneof kind {
    uint32 read = 1;
    bytes write = 2;
  }
}

message TraceEvent {
  message InstructionStart {
    uint64 cycle = 1;
    uint32 pc = 2;
    uint32 insn = 3;
  }

  message RegisterSet {
    uint32 idx = 1;
    uint32 value = 2;
  }

  message MemorySet {
    uint32 addr = 1;
    uint32 value = 2;
    bytes region = 3;
  }

  oneof kind {
    InstructionStart insn_start = 1;
    RegisterSet register_set = 2;
    MemorySet memory_set = 3;
  }
}

message CoprocessorRequest {
  oneof kind {
    ProveZkrRequest prove_zkr = 1;
  }
}

message OnIoReply {
  oneof kind {
    bytes ok = 1;
    GenericError error = 2;
  }
}

message OnSegmentDone {
  SegmentInfo segment = 1;
}

message OnSessionDone {
  SessionInfo session = 1;
}

message OnProveDone {
  Asset prove_info = 1;
}

message GenericReply {
  oneof kind {
    google.protobuf.Empty ok = 1;
    GenericError error = 2;
  }
}

message GenericError {
  string reason = 1;
}

service Server {
  rpc hello(HelloRequest) returns (HelloReply);
  rpc prove(ProveRequest) returns (stream ServerReply);
  rpc execute(ExecuteRequest) returns (stream ServerReply);
  rpc prove_segment(ProveSegmentRequest) returns (ProveSegmentReply);
  rpc prove_zkr(ProveZkrRequest) returns (ProveZkrReply);
  rpc lift(LiftRequest) returns (LiftReply);
  rpc join(JoinRequest) returns (JoinReply);
  rpc resolve(ResolveRequest) returns (ResolveReply);
  rpc compress(CompressRequest) returns (CompressReply);
}

service ExecuteCallback {
  rpc on_io(OnIoRequest) returns (OnIoReply);
  rpc on_segment_done(OnSegmentDone) returns (GenericReply);
  rpc on_session_done(OnSessionDone) returns (google.protobuf.Empty);
}

service ProveCallback {
  rpc on_io(OnIoRequest) returns (OnIoReply);
  rpc on_prove(OnProveDone) returns (google.protobuf.Empty);
}
